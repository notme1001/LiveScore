{"version":3,"sources":["routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","lazy","AllScore","Details","FrontendRoutes","fallback","className","icon","faSpinner","exact","path","component","ProviderConfig","basename","process","MainApp","hot","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gNAIMA,EAAOC,gBAAK,kBAAM,sDAClBC,EAAWD,gBAAK,kBAAM,sDACtBE,EAAUF,gBAAK,kBAAM,sDAyBZG,EAnBQ,WACrB,OACE,cAAC,IAAD,UACE,eAAC,WAAD,CACEC,SACE,qBAAKC,UAAU,kEAAf,SACJ,cAAC,IAAD,CAAiBC,KAAMC,IAAWF,UAAU,sDAH5C,UAOE,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,cAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,YAAYC,UAAWT,IACzC,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,cAAcC,UAAWR,U,OClB7CS,G,MAAiB,WACrB,OACI,cAAC,IAAD,CAAQC,SAAUC,GAAlB,SACE,cAAC,IAAD,CAAOJ,KAAK,IAAIC,UAAWI,QAWpBC,qBANf,WACE,OACE,cAAC,EAAD,OCJgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCZnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d79aecbd.chunk.js","sourcesContent":["import React, { lazy, Suspense } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner, } from '@fortawesome/free-solid-svg-icons'\nconst Home = lazy(() => import('../container/pages/home'));\nconst AllScore = lazy(() => import('../container/pages/allScore'));\nconst Details = lazy(() => import('../container/pages/details'));\n\nconst NotFound = () => {\n  return <Redirect to=\"/\" />;\n};\n\nconst FrontendRoutes = () => {\n  return (\n    <Switch>\n      <Suspense\n        fallback={\n          <div className=\"flex justify-center items-center w-screen h-screen bg-primeSand\">\n\t\t\t\t\t\t<FontAwesomeIcon icon={faSpinner} className=\"animate-spin text-xl text-blue-500 outline-none\"/>\t\t\n\t\t\t\t\t</div>\n        }\n      >\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/allscore\" component={AllScore} />\n        <Route exact path=\"/detail/:id\" component={Details} />\n        {/* <Route exact path=\"*\" component={NotFound} /> */}\n      </Suspense>\n    </Switch>\n  );\n};\n\nexport default FrontendRoutes;\n","import React from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport MainApp from './routes';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './static/css/style.css';\n\nconst ProviderConfig = () => {\n  return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route path=\"/\" component={MainApp} /> \n      </Router>\n  );\n};\n\nfunction App() {\n  return (\n    <ProviderConfig />\n  );\n}\n\nexport default hot(App);;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}